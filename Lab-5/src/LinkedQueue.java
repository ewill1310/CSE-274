import java.util.NoSuchElementException;/** * A class that implements the ADT queue by using a chain of linked nodes that * has references to the front and end of the chain. Adds will be after the last * node. Removes will be from the front node. */public final class LinkedQueue<T> implements QueueInterface<T> {	private Node firstNode; // References node at front of queue	private Node lastNode; // References node at back of queue	public LinkedQueue() {		firstNode = null;		lastNode = null;	} // end default constructor	public void add(T newEntry) {		Node newNode = new Node(newEntry);		if (firstNode == null) {			firstNode = newNode;		} else {			Node currentNode = firstNode;			while (currentNode.next != null) {				currentNode = currentNode.next;			}			 currentNode.next = newNode;		}	} // end enqueue	public T peek() {		if (isEmpty()) {			throw new NoSuchElementException();		}else {			return firstNode.data;		}	} // end getFront	public T remove() {		T frontData = peek(); // Might throw NoSuchElementException		Node tempNode = firstNode;		firstNode = firstNode.next;		tempNode.next = null;		return frontData;	} // end dequeue	public boolean isEmpty() {		if(firstNode == null) {			return true;		}		return false;	} // end isEmpty	public void clear() {		while(isEmpty() == false) {			remove();		}	} // end clear 	private class Node {		private T data;		private Node next;		private Node(T data) {			this.data = data;			this.next = null;		}	}}